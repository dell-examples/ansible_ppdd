# Example Playbok to configure PPDD
- name: Playbook to configure DataDomain for PPDM
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files: 
    - ./vars/main.yml
  vars: 
    mtree_name: SysDR_ppdm-baremetal
    sourceHostname: "ddve3.home.labbuildr.com"
    targetHostname: "ddve4.home.labbuildr.com"
    port: 2051
    encryption: false
    authentication: "DISABLED"
    propagateRetentionLock: false
    ipVersion: "IPV4"
    destinationTenantUnit: "0"
    maxReplStreams: 8 
    source_password: "{{ ppdd_password }}"
    target_password: "{{ ppdd_password }}"
    source_username: "{{ ppdd_username }}"   
    target_username: "{{ ppdd_username }}"   
  tasks:

###### Target Operations

  - name: Checking if PPDD FQDN / IP is set
    fail: 
      msg: "We do not have targetHostname set !"
    when: (targetHostname is not defined) or (targetHostname|length <= 8)
  - name: Checking target_password is set
    fail: 
      msg: "We do not have target_password  set !"
    when: (target_password is not defined) or (target_password|length == 0)     
  - name: Setting Base URL
    set_fact: 
      ppdd_baseurl: "https://{{ targetHostname }}"  
  - name: Check target DataDomain Appliance Ready {{ targetHostname }}
    include_role:
      name: wait_ppdd_api_ready 
  - debug: 
      msg: "{{ result }}"
      verbosity: 1            
  - name: Get PPDD Token for {{ targetHostname }}
    vars:
      username: "{{ target_username }}"
      password: "{{ target_password }}"
    include_role: 
      name: get_ppdd_token
  - debug: 
      msg: "{{ access_token }}"
      verbosity: 1
      
  - name: Set PPDD Mtrees Replication
    include_role: 
      name: set_ppdd_mtree_replications
    vars:
      mtree_name: "{{ mtree_name }}"
      data:
        sourceHostname: "{{ sourceHostname }}"
        targetHostname: "{{ targetHostname }}"
        connectionHostname: "{{ sourceHostname }}"
        port: "{{ port }}"
        sourcePath: "mtree://{{ sourceHostname }}/data/col1/{{ mtree_name }}"
        targetPath: "mtree://{{ targetHostname }}/data/col1/{{ mtree_name }}_repl"
        encryption: "{{ encryption }}"
        authentication: "{{ authentication }}"
        propagateRetentionLock: "{{ propagateRetentionLock }}"
        ipVersion: "{{ ipVersion }}"
        destinationTenantUnit: "{{ destinationTenantUnit }}"
        maxReplStreams: "{{ maxReplStreams }}"
  - debug:
      msg: "{{ mtree_replication }}"
      verbosity: 0 
    when: mtree_replication is defined

### Source Operations


  - name: Checking if PPDD FQDN / IP is set
    fail: 
      msg: "We do not have sourceHostname set !"
    when: (sourceHostname is not defined) or (sourceHostname|length <= 8)
  - name: Checking source_password is set
    fail: 
      msg: "We do not have source_password  set !"
    when: (source_password is not defined) or (source_password|length == 0)     
  - name: Setting Base URL
    set_fact: 
      ppdd_baseurl: "https://{{ sourceHostname }}"  
  - name: Check Source DataDomain Appliance Ready {{ sourceHostname }}
    include_role:
      name: wait_ppdd_api_ready 
  - debug: 
      msg: "{{ result }}"
      verbosity: 1            
  - name: Get PPDD Token for {{ sourceHostname }}
    vars:
      username: "{{ source_username }}"
      password: "{{ source_password }}"
    include_role: 
      name: get_ppdd_token
  - debug: 
      msg: "{{ access_token }}"
      verbosity: 1
  - name: Checking Mtree exists
    include_role: 
      name: get_ppdd_mtrees
    vars:
      id: "/data/col1/{{ mtree_name | basename }}"    
  - debug:
     msg: "{{ mtrees }}"
     verbosity: 0 
    when:
      - mtrees 
      
  - name: Set PPDD Mtrees Replication
    include_role: 
      name: set_ppdd_mtree_replications
    vars:
      mtree_name: "{{ mtree_name }}"
      data:
        sourceHostname: "{{ targetHostname }}"
        targetHostname: "{{ sourceHostname }}"
        connectionHostname: "{{ targetHostname }}"
        port: "{{ port }}"
        sourcePath: "mtree://{{ sourceHostname }}/data/col1/{{ mtree_name }}"
        targetPath: "mtree://{{ targetHostname }}/data/col1/{{ mtree_name }}_repl"
        encryption: "{{ encryption }}"
        authentication: "{{ authentication }}"
        propagateRetentionLock: "{{ propagateRetentionLock }}"
        ipVersion: "{{ ipVersion }}"
        destinationTenantUnit: "{{ destinationTenantUnit }}"
        maxReplStreams: "{{ maxReplStreams }}"
  - debug:
      msg: "{{ mtree_replication }}"
      verbosity: 0 
    when: mtree_replication is defined
      



      
  - name: Checking Mtree Replication
    include_role: 
      name: get_ppdd_mtree_replications
    vars:
      filter: "sourceMtreePath=/data/col1/{{ mtree_name | basename }} and destinationMtreePath=/data/col1/{{ mtree_name | basename }}_repl and sourceHost={{ sourceHostname }} and destinationHost={{ targetHostname }}"
  - debug:
      msg: "{{ mtree_replications}}"
    when:  mtree_replications.paging_info.total_entries == 1


  - name: Initzialize Mtree Replication
    include_role: 
      name: initialize_ppdd_mtree_replication
    vars:
      ID: "{{ mtree_replications.contexts[0].id }}"
    when: 
      - mtree_replications.contexts[0].id is defined  
      - mtree_replications.contexts[0].status == "UNINITIALIZED"

  - name: Checking Mtree Replication
    include_role: 
      name: get_ppdd_mtree_replications
    vars:
      filter: "sourceMtreePath=/data/col1/{{ mtree_name | basename }} and destinationMtreePath=/data/col1/{{ mtree_name | basename }}_repl and sourceHost={{ sourceHostname }} and destinationHost={{ targetHostname }}"
    when: mtree_replications.contexts[0].id is defined  
  - debug:
      msg: "{{ mtree_replications}}"
    when:  
      - mtree_replications.paging_info.total_entries == 1  
      - mtree_replications.contexts[0].id is defined    